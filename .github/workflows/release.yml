name: SquarePhish2 Release
# This workflow is used to release a new version of SquarePhish2.
# It is triggered when a release is created.
# The workflow will build the binary for the current platform(s) and upload it to the release.
# It will also generate a SHA256 hashes of the releases and add it to the release description.
# Reference: https://github.com/gophish/gophish/blob/master/.github/workflows/release.yml

on:
  release:
    types: [created]

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64, arm64]
        include:
          - os: windows-latest
            goos: windows
            bin: 'squarephish.exe'
            releaseos: windows
          - os: ubuntu-latest
            goos: linux
            bin: 'squarephish'
            releaseos: linux
          - os: macos-latest
            goos: darwin
            bin: 'squarephish'
            releaseos: macos
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24
      - if: matrix.arch == 'amd64'
        run: echo "RELEASE=squarephish-${{ github.event.release.tag_name }}-${{ matrix.releaseos }}-64bit" >> $GITHUB_ENV
      - if: matrix.arch == 'arm64'
        run: echo "RELEASE=squarephish-${{ github.event.release.tag_name }}-${{ matrix.releaseos }}-arm64" >> $GITHUB_ENV
      - if: |
          matrix.os == 'windows-latest' &&
          matrix.arch == 'amd64'
        run: echo "RELEASE=squarephish-${{ github.event.release.tag_name }}-${{ matrix.releaseos }}-64bit" | Out-File -FilePath $env:GITHUB_ENV -Append # https://github.com/actions/runner/issues/1636
      - if: |
          matrix.os == 'windows-latest' &&
          matrix.arch == 'arm64'
        run: echo "RELEASE=squarephish-${{ github.event.release.tag_name }}-${{ matrix.releaseos }}-arm64" | Out-File -FilePath $env:GITHUB_ENV -Append # https://github.com/actions/runner/issues/1636
      - uses: actions/checkout@v4
      - name: Build ${{ matrix.goos }}/${{ matrix.arch }}
        run: go build -o ${{ matrix.bin }} cmd/squarephish/main.go
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.arch }}
          GO111MODULE: on
      - name: Upload to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RELEASE }}
          path: ${{ matrix.bin }}

  package:
    name: Package Assets
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: bin
      - name: Package Releases
        run: |
          mkdir releases;
          for RELEASE_DIR in bin/*
          do
            echo "Creating release $RELEASE_DIR"
            for BINARY in $RELEASE_DIR/*
            do
              cp $BINARY .;
              zip -r releases/$(basename $RELEASE_DIR).zip \
                $(basename ${BINARY}) \
                templates \
                static \
                scripts \
                pretexts \
                config.json \
                VERSION \
                LICENSE \
                README.md;
              rm $BINARY;
            done
          done
      - name: Upload to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: releases
          path: releases/*.zip

  upload:
    name: Upload to the Release
    runs-on: ubuntu-latest
    needs: package
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: releases
          path: releases/
      - name: Upload Archives to Release
        env:
          UPLOAD_URL: ${{ github.event.release.upload_url }}
          API_HEADER: "Accept: application/vnd.github.v3+json"
          AUTH_HEADER: "Authorization: token ${{ secrets.GITHUB_TOKEN }}"
        run: |
          UPLOAD_URL=$(echo -n $UPLOAD_URL | sed s/\{.*//g)
          for FILE in releases/*
          do
            echo "Uploading ${FILE}";
            curl \
              -H "${API_HEADER}" \
              -H "${AUTH_HEADER}" \
              -H "Content-Type: $(file -b --mime-type ${FILE})" \
              --data-binary "@${FILE}" \
              "${UPLOAD_URL}?name=$(basename ${FILE})";
          done
      - name: Generate SHA256 Hashes
        env:
          API_HEADER: "Accept: application/vnd.github.v3+json"
          AUTH_HEADER: "Authorization: token ${{ secrets.GITHUB_TOKEN }}"
          RELEASE_URL: ${{ github.event.release.url }}
        run: |
          CURRENT_DESCRIPTION=$(curl -s -H "${API_HEADER}" -H "${AUTH_HEADER}" "${RELEASE_URL}" | jq -r '.body')
          HASH_TABLE="| SHA256 Hash | Filename |\n|-----|-----|\n"
          for FILE in releases/*
          do
            FILENAME=$(basename ${FILE})
            HASH=$(sha256sum ${FILE} | cut -d ' ' -f 1)
            HASH_TABLE="${HASH_TABLE}|${HASH}|${FILENAME}|\n"
          done
          UPDATED_DESCRIPTION="${CURRENT_DESCRIPTION}\n\n${HASH_TABLE}"
          curl \
            -XPATCH \
            -H "${API_HEADER}" \
            -H "${AUTH_HEADER}" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"${UPDATED_DESCRIPTION}\"}" \
            "${RELEASE_URL}";